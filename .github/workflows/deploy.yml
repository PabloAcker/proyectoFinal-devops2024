name: CI/CD Pipeline for Task Manager

on:
    workflow_dispatch:

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    env:
      AWS_REGION: "us-east-1"
      TF_WORKING_DIR: "terraform"

    steps:
      # 1. Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # 3. Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. Build Docker images
      - name: Build Backend Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/task-manager-backend -f ./task-manager-backend/task-manager-backend/Dockerfile ./task-manager-backend/task-manager-backend
          docker push ${{ secrets.DOCKER_USERNAME }}/task-manager-backend

      - name: Build Frontend Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/task-manager-frontend ./task-manager-frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/task-manager-frontend

      # 5. Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # 6. Initialize Terraform
      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      # 7. Apply Terraform Plan
      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
            terraform apply -auto-approve
            terraform output -raw ec2_public_ip > $GITHUB_WORKSPACE/ec2_ip.txt
            terraform output -raw rds_endpoint > $GITHUB_WORKSPACE/rds_endpoint.txt

      # Debug:
      - name: Verify ec2_ip.txt
        run: |
            if [ ! -f $GITHUB_WORKSPACE/ec2_ip.txt ]; then
              echo "Error: ec2_ip.txt not found!"
              exit 1
            fi
            cat $GITHUB_WORKSPACE/ec2_ip.txt

      - name: Inspect rds_endpoint.txt
        run: cat $GITHUB_WORKSPACE/rds_endpoint.txt

      - name: Debug RDS Variable
        run: echo "RDS_ENDPOINT=$RDS_ENDPOINT"

      # 8. Export the RDS endpoint as an environment variable
      - name: Set RDS Endpoint
        run: |
            RDS_ENDPOINT=$(cat $GITHUB_WORKSPACE/rds_endpoint.txt | sed 's/:.*//')
            echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV

      # 9. Transfer RDS Endpoint to EC2
      - name: Transfer RDS Endpoint to EC2
        run: |
            EC2_IP=$(cat $GITHUB_WORKSPACE/ec2_ip.txt)
            scp -o StrictHostKeyChecking=no -i ./terraform/nginx-server.key $GITHUB_WORKSPACE/rds_endpoint.txt ec2-user@$EC2_IP:/etc/rds_endpoint

